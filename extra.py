#!/usr/bin/python

import csv
import os
import math
import numpy 
import matplotlib.pyplot as plt

def q(input_filename, distances, items, counter, amplitudes, counterAmps, x_eyes, y_eyes, x_hits, y_hits):
	conditions = {}
	conditionsHit = {}
	timestamps = {}
	x_hit = 0
	x_eye = 0
	x_post_eye = 0
	y_eye = 0
	y_hit = 0
	y_post_eye = 0
	distance_x = 0
	distance_y = 0
	distance = 0
	counter = 0
	lastRow = 0
	newShape = 0
	lastShape = 0

	csv_reader = csv.reader(open(input_filename), delimiter = ',')

	for row in csv_reader:
		if row != []:
			if (len(x_hits) == 9) and not(newShape == lastShape):

				if row[1] == "TobiiEyePosition":
					if "circle" in shape and "separated" not in shape:
						x_eye = float(row[2])
						y_eye = float(row[3])

						# print "eye position"
						# print x_hit, y_hit, x_eye, y_eye
						x_hits.append(x_hit)
						y_hits.append(y_hit)
						x_eyes.append(x_eye)
						y_eyes.append(y_eye)

						distance = math.sqrt(pow((x_eye - x_hit), 2) + pow((y_eye - y_hit), 2) )
						distances.append(distance)

			elif row[1] == "Condition":
				size = row[4]
				# print size
				amplitude = row[3]
				# print amplitude
				shape = row[2] + "-" + row[3] + "-" + row[4]
				counter = 0
				lastRow = 1
				newShape = shape

			elif row[1] == "ClickHit":
				if "circle" in shape and "separated" not in shape:
					# print "ClickHit"
					x_hit = float(row[2])
					y_hit = float(row[3])
					counter = 0
					lastRow = 0 #if we have the following: clickhit (last from one condition, so no more eye data from it), then new condition, and immediately eyeposition. with last row we are addressing this problem.
					

			elif row[1] == "TobiiEyePosition":
				if "circle" in shape and "separated" not in shape:
					x_eye = float(row[2])
					y_eye = float(row[3])
					counter = counter + 1
					if lastRow == 1:
						counter = counter - 1

					if (size == "24") and (amplitude == "512"):	
						if counter == 1:
							# print "eye position"
							# print x_hit, y_hit, x_eye, y_eye
							x_hits.append(x_hit)
							y_hits.append(y_hit)
							x_eyes.append(x_eye)
							y_eyes.append(y_eye)

							lastShape = shape

							distance = math.sqrt(pow((x_eye - x_hit), 2) + pow((y_eye - y_hit), 2) )
							distances.append(distance)

	return (distances)

def main():

	finallist = []
	id = 0


	pre_x_eyes = [[264.7, 311.4, 362.5, 533.2, 521.3, 363.1, 688.7, 268.4, 730.6, 253.6], [694.0, 487.1, 448.2, 398.8, 433.8, 403.0, 667.6, 424.0, 586.7, 609.0], [220.8, 548.0, 326.6, 489.9, 497.5, 326.9, 635.3, 206.3, 667.5, 247.9], [230.5, 651.2, 333.4, 510.0, 498.0, 331.6, 649.8, 225.8, 710.3, 534.6], [428.7, 256.3, 677.9, 571.3, 561.4, 529.2, 371.2, 677.6, 554.1, 744.8], [261.2, 675.7, 388.5, 527.3, 556.8, 359.5, 720.9, 271.8, 304.7, 281.5], [327.2, 496.2, 574.8, 313.1, 682.4, 200.0, 719.7, 218.2, 325.0, 486.8], [273.1, 699.6, 359.4, 541.8, 550.0, 356.7, 707.7, 266.8, 762.9, 231.6], [295.2, 681.9, 410.9, 547.3, 555.5, 375.8, 700.4, 278.2, 743.7, 291.0], [271.2, 702.6, 381.7, 545.1, 548.0, 385.1, 696.3, 273.1, 768.4, 264.9], [298.2, 697.9, 371.9, 545.0, 482.3, 368.0, 666.2, 270.3, 736.2, 388.0], [273.7, 703.1, 368.9, 553.1, 531.9, 367.3, 696.0, 265.6, 800.4, 284.2], [251.3, 688.0, 362.0, 543.8, 541.2, 380.8, 674.7, 261.7, 723.3, 253.1], [258.4, 696.4, 387.4, 543.8, 554.0, 371.5, 691.8, 594.8, 341.8, 263.1], [588.5, 473.5, 369.6, 534.4, 507.6, 349.7, 691.1, 246.7, 690.1, 241.9], [252.8, 685.7, 356.0, 522.6, 522.0, 348.1, 675.2, 228.2, 689.4, 249.2], [579.8, 383.3, 448.5, 543.8, 447.8, 429.5, 608.2, 495.7, 759.7, 270.1], [478.0, 743.7, 452.7, 600.2, 606.1, 443.2, 700.3, 292.0, 775.1, 314.3], [250.7, 660.2, 343.0, 515.4, 530.2, 353.3, 697.2, 228.1, 761.8, 245.4], [711.5, 374.5, 464.8, 549.2, 388.1, 669.1, 366.5, 646.8, 433.3, 476.6], [268.9, 698.9, 367.7, 563.2, 528.7, 363.7, 656.7, 266.1, 742.5, 265.1], [251.4, 582.0, 335.0, 437.3, 491.1, 404.8, 539.8, 302.0, 585.7, 249.1], [259.0, 679.1, 374.1, 529.8, 557.3, 351.6, 693.8, 250.5, 737.2, 244.7], [533.9, 551.1, 537.1, 353.2, 344.2, 237.5, 248.4, 667.6, 672.4, 378.6], [224.3, 658.7, 347.7, 511.0, 547.6, 363.6, 650.0, 273.6, 721.3, 250.7], [244.3, 658.4, 348.9, 531.8, 509.8, 364.6, 659.2, 249.1, 721.6, 222.3], [202.6, 696.6, 287.2, 508.8, 489.5, 311.2, 627.7, 432.8, 718.4, 204.1], [245.0, 688.2, 486.9, 530.8, 375.9, 355.1, 662.1, 240.4, 727.2, 240.0], [556.8, 682.7, 388.1, 562.4, 553.6, 362.1, 700.4, 329.9, 472.5, 294.1], [232.8, 661.9, 319.1, 513.5, 482.6, 339.5, 640.2, 236.9, 710.6, 236.4], [299.3, 718.1, 367.3, 529.4, 530.6, 376.1, 678.5, 253.9, 747.2, 238.2], [292.0, 714.4, 385.5, 541.9, 560.7, 374.1, 716.9, 246.5, 725.5, 266.3], [280.3, 711.1, 409.0, 538.6, 572.5, 422.2, 740.6, 594.6, 780.6, 289.5], [258.9, 681.9, 308.5, 533.6, 537.2, 364.2, 687.3, 651.5, 736.0, 207.7], [651.7, 681.8, 345.2, 542.9, 509.1, 365.4, 378.8, 244.7, 342.0, 237.0], [742.9, 350.8, 549.5, 366.9, 267.0, 688.6, 648.5, 547.9, 433.5, 442.7], [413.8, 382.7, 543.9, 534.1, 550.9, 362.6, 224.9, 494.4, 562.4, 370.7], [243.7, 673.9, 369.8, 534.2, 551.4, 356.3, 660.6, 241.3, 732.9, 268.0], [101.4, 543.2, 216.0, 393.0, 351.5, 207.0, 546.4, 99.3, 604.7, 99.0], [392.5, 720.5, 387.2, 537.4, 558.8, 425.9, 762.8, 264.0, 778.8, 279.1], [659.3, 700.7, 370.9, 539.9, 543.5, 366.9, 701.0, 242.0, 753.0, 244.6], [226.9, 642.5, 239.8, 500.3, 493.7, 319.0, 646.2, 209.3, 706.2, 225.6], [393.4, 677.5, 334.3, 514.3, 516.2, 386.0, 312.1, 369.7, 744.2, 257.2], [243.2, 694.4, 359.6, 538.5, 528.0, 355.2, 687.3, 236.7, 745.1, 246.9], [291.4, 723.7, 391.9, 538.4, 577.9, 378.5, 707.1, 310.3, 768.6, 328.4]]
	pre_y_eyes = [[373.0, 233.3, 219.2, 729.4, 287.1, 693.8, 349.5, 566.1, 455.4, 352.1], [310.6, 394.5, 503.3, 378.5, 417.8, 400.4, 545.1, 320.6, 624.9, 291.9], [414.8, 581.3, 297.7, 576.1, 243.9, 713.1, 319.8, 589.6, 495.5, 380.1], [393.6, 649.5, 265.1, 745.0, 247.9, 707.9, 316.5, 566.6, 504.1, 559.7], [346.0, 393.4, 620.7, 735.1, 463.7, 237.6, 695.4, 336.4, 533.6, 509.5], [445.0, 685.1, 327.8, 779.2, 254.9, 714.2, 327.7, 576.9, 381.4, 444.6], [284.7, 854.0, 284.6, 759.8, 391.6, 599.2, 517.6, 475.2, 501.7, 561.8], [440.2, 644.2, 284.6, 724.8, 199.9, 708.5, 328.0, 567.0, 464.5, 344.1], [433.8, 635.1, 292.8, 698.0, 276.6, 713.9, 356.5, 589.7, 490.6, 395.6], [406.5, 653.5, 277.4, 729.5, 271.5, 702.5, 352.8, 585.2, 466.9, 414.8], [451.7, 714.1, 322.9, 749.5, 670.0, 737.9, 393.5, 575.8, 521.7, 317.7], [494.4, 686.4, 294.0, 773.4, 304.8, 742.6, 364.4, 622.3, 492.9, 408.6], [465.2, 707.9, 254.3, 769.9, 265.4, 740.6, 373.6, 586.8, 556.0, 422.2], [396.7, 643.8, 272.6, 747.5, 270.1, 703.3, 346.3, 384.3, 391.9, 402.0], [606.1, 454.5, 267.5, 399.5, 244.4, 722.1, 323.7, 573.5, 469.6, 388.7], [444.7, 681.2, 305.1, 768.2, 320.7, 722.0, 396.6, 602.1, 546.8, 462.7], [510.5, 233.2, 434.6, 380.7, 456.3, 684.4, 361.2, 539.3, 498.3, 392.2], [468.1, 656.0, 289.0, 747.3, 260.8, 755.4, 375.9, 588.6, 502.3, 434.2], [414.0, 660.6, 262.1, 733.7, 248.3, 715.7, 323.5, 600.5, 484.9, 365.1], [663.8, 282.5, 527.5, 260.9, 685.2, 352.5, 575.1, 465.2, 431.5, 445.1], [410.7, 661.7, 307.1, 716.8, 254.5, 668.5, 345.8, 572.6, 486.5, 389.7], [545.6, 779.9, 430.1, 804.6, 372.9, 839.2, 456.1, 695.4, 640.1, 560.4], [372.9, 637.7, 327.7, 729.8, 239.7, 705.7, 300.6, 571.7, 505.7, 342.2], [778.2, 232.9, 237.9, 729.5, 502.1, 590.3, 414.4, 694.8, 643.6, 261.5], [365.5, 633.4, 300.8, 715.3, 191.6, 702.8, 347.3, 681.7, 438.6, 374.2], [415.9, 663.9, 277.1, 720.4, 235.0, 701.5, 337.6, 563.9, 476.7, 441.2], [366.8, 623.3, 239.5, 733.5, 254.8, 686.5, 372.1, 496.3, 488.1, 365.8], [408.6, 647.7, 727.3, 708.2, 653.1, 700.0, 340.1, 549.7, 485.1, 394.6], [436.6, 569.9, 257.8, 306.5, 216.6, 642.6, 302.8, 450.3, 307.4, 398.9], [442.3, 726.5, 298.2, 831.2, 291.5, 801.0, 382.5, 676.5, 568.3, 495.8], [438.5, 602.7, 254.5, 765.6, 244.5, 733.7, 351.6, 610.7, 493.5, 417.6], [498.1, 700.6, 352.4, 764.7, 312.9, 749.6, 389.9, 616.8, 530.9, 459.1], [449.0, 719.1, 330.8, 783.8, 261.6, 687.0, 337.5, 449.6, 538.8, 432.4], [459.1, 702.7, 285.1, 781.9, 314.1, 735.6, 335.4, 562.9, 545.7, 429.6], [634.2, 664.0, 289.5, 698.1, 246.6, 715.8, 528.0, 607.1, 453.2, 420.2], [462.0, 263.9, 519.6, 245.8, 412.6, 305.5, 343.3, 222.7, 272.4, 329.7], [430.9, 294.1, 684.7, 708.5, 234.3, 696.7, 593.1, 486.4, 521.2, 317.5], [413.3, 661.0, 281.1, 748.4, 246.3, 721.3, 340.9, 600.6, 516.0, 439.7], [473.2, 757.5, 405.9, 854.4, 348.2, 818.6, 447.1, 694.9, 613.8, 524.4], [555.1, 544.5, 269.9, 753.8, 250.9, 400.3, 313.9, 590.1, 449.2, 391.3], [462.9, 646.0, 269.7, 735.1, 212.7, 687.0, 280.1, 523.5, 488.3, 383.7], [384.5, 615.8, 221.3, 681.1, 210.1, 665.2, 307.4, 533.4, 475.7, 357.3], [414.7, 631.6, 243.6, 726.0, 246.3, 645.1, 512.3, 576.2, 498.5, 392.3], [379.5, 638.0, 254.6, 726.7, 228.2, 714.8, 321.5, 559.8, 491.0, 387.4], [426.7, 737.0, 292.1, 834.2, 330.1, 773.4, 465.9, 591.7, 549.0, 392.9]]	
	for filename in os.listdir('fitts_law_final_data/'):

		# print filename
		skip = False
		overall = []
		x_eyes = []
		y_eyes = []
		x_hits = []
		y_hits = []
		distances = []
		x_post_eyes = []
		y_post_eyes = []
		items = {}
		counter = {}
		amplitudes = {}
		counterAmps = {}
		less100 = []
		less200 = []
		less300 = []
		less400 = []
		less500 = []
		less1000=[]
		# print filename
		q("fitts_law_final_data/" + filename, overall, items, counter, amplitudes, counterAmps, x_eyes, y_eyes, x_hits, y_hits)

		overall = numpy.asarray(overall)
		overall = [k for k in overall if not (k == -1)]
		finallist = finallist + overall



		##Plot gaze data in red, and actual click hits in blue
		## from http://forums.udacity.com/questions/10012308/how-to-draw-two-graphs-in-one-scatterplot
		fig = plt.figure()
		ax = fig.add_subplot(111)
		# print "len of x eyes"
		# print len(x_eyes)
		# print "len of x hits"
		# print len(x_hits)
		# print "overall"
		# print overall
		# print "max overall"
		# print max(overall)

		ax.scatter(x_eyes, y_eyes, color ='red')
		ax.scatter(x_hits, y_hits, color = 'blue')
	   
	  	ax.scatter(pre_x_eyes[id], pre_y_eyes[id], color = 'green')
	   
		plt.xlim(0, 1000)
		plt.ylim(0,1000)
	   
		# print filename
		plt.show()
		id = id + 1
		# print filename
		# print len(overall)
		# print overall

	# print "len of overall"
	# print len(finallist)
	# print "max overall"
	# print max(finallist)


	# print overall
	fig = plt.figure()
	ax = fig.add_subplot(111)
	x = finallist
	numbins =  [0, 50, 100, 200, 300, 400, 500, 600, 800, 1000]
	ax.hist(x, numbins, color= 'green', alpha = 0.8)
	plt.show()

	# print finallist
	# for y in finallist:
	# 	if y < 100:
	# 		less100.append(y)
	# 	elif y < 200:
	# 		less200.append(y)
	# 	elif y < 300:
	# 		less300.append(y)
	# 	elif y < 400:
	# 		less400.append(y)
	# 	elif y < 500:
	# 		less500.append(y)
	# 	elif y < 1000:
	# 		less1000.append(y)

	# print len(less100)
	# print len(less200)
	# print len(less300)
	# print len(less400)
	# print len(less500)
	# print len(less1000)

	# print float(float(len(less100))/float(len(finallist)))
	# print float(float(len(less200))/float(len(finallist)))
	# print float(float(len(less300))/float(len(finallist)))
	# print float(float(len(less400))/float(len(finallist)))
	# print float(float(len(less500))/float(len(finallist)))
	# print float(float(len(less1000))/float(len(finallist)))

	# print "DOOONE "
	# print "POST HIT"
	# print "x eyes"
	# print x_eyes
	# print "y eyes"
	# print y_eyes

	# print "x hits"
	# print x_hits
	# print "y hits"
	# print y_hits


if __name__ == '__main__':
	main()


# 